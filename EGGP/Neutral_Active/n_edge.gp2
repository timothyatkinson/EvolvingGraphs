Main = InitActive; try ([pickEdge]; markOutputs!; [mutateEdge]; unmarkOutputs!); EndActive

InitActive = initActiveNode; outActive!; propActive!
EndActive = removeActiveEdge!; removeActive

initActiveNode
(
	a : list
)
[
	(n0, a)
	|
]
=>
[
	(n0, a)
	(n1(R), "Active"#grey)
	|
]
interface = {
	n0
}

outActive
(
	a : list
)
[
	(n0, a:"OUT")
	(n1(R), "Active"#grey)
	|
]
=>
[
	(n0, a:"OUT")
	(n1(R), "Active"#grey)
	|
	(e0, n1, n0, empty#dashed)
]
interface = {
	n0, n1
}
where not edge(n1, n0)

propActive
(
	a, b, c : list
)
[
	(n0, a)
	(n1, b)
	(n2(R) , "Active"#grey)
	|
	(e0, n0, n1, c)
]
=>
[
	(n0, a)
	(n1, b)
	(n2(R) , "Active"#grey)
	|
	(e0, n0, n1, c)
	(e1, n2, n1, empty#dashed)
]
interface = {
	n0, n1, n2
}
where not edge(n2, n1)

removeActiveEdge
(
	a : list
)
[
	(n0, a)
	(n1(R), "Active"#grey)
	|
	(e0, n1, n0, empty#dashed)
]
=>
[
	(n0, a)
	(n1(R), "Active"#grey)
	|
]
interface = {
	n0, n1
}

removeActive
()
[
	(n1(R), "Active"#grey)
	|
]
=>
[
	|
]
interface = {}

pickEdge
(
	a, b, c : list
)
[
	(n0, a)
	(n1, b)
	(n2(R), "Active"#grey)
	|
	(e0, n0, n1, c)
]
=>
[
	(n0, a#blue)
	(n1, b#green)
	(n2(R), "Active"#grey)
	|
	(e0, n0, n1, c#green)
]
interface =
{
	n0, n1, n2
}
where not edge(n2, n0)

markOutputs
(
	a, b, c : list
)
[
	(n0, a)
	(n1, b#blue)
	|
	(e0, n0, n1, c)
]
=>
[
	(n0, a#blue)
	(n1, b#blue)
	|
	(e0, n0, n1, c)
]
interface =
{
	n0, n1
}

pickNewTarget
(
	d : list;
	s : string
)
[
	(n2, d:s)
	|
]
=>
[
	(n2, d:s#red)
	|
]
interface =
{
	n2
}
where s != "OUT"

mutateEdge
(
	a, b, c, d : list;
	s : string
)
[
	(n0, a#blue)
	(n1, b#green)
	(n2, d:s)
	|
	(e0, n0, n1, c#green)
]
=>
[
	(n0, a)
	(n1, b)
	(n2, d:s)
	|
	(e0, n0, n2, c)
]
interface =
{
	n0, n1, n2
}
where s != "OUT"

unmarkOutputs
(
	a : list
)
[
	(n0, a#blue)
	|
]
=>
[
	(n0, a)
	|
]
interface =
{
	n0
}
