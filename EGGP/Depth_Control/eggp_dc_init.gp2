//********************************Generate Individual********************************

//Code for generating the first individual
Main = GenerateIndividual
GenerateIndividual = initNodeCounter; AddNode!; [connectOutput]!; removeDepth!; decolourNode!; deleteNodeCounter
AddNode = [addNode]; [addEdgeToArity]!; updateDepth!; decolourNode

// INIT NODE COUNTER - Creates a counter for adding nodes
initNodeCounter
(
	x : int
)
[
	(n0(R), "Nodes":x)
	|
]
=>
[
	(n0(R), "Nodes":x)
	(n1(R), "NodeCounter":x)
	|
]
interface =
{
	n0
}

// ADD NODE - Adds a function from the FunctionSet
addNode
(
	f : string;
	x, y : int
)
[1.0]
[
	(n0(R), "NodeCounter":x)
	(f0(R), "FunctionSet":f:y)
	|
]
=>
[
	(f0(R), "NodeCounter":x - 1)
	(n0(R), "FunctionSet":f:y)
	(t1, 0:f#red)
	|
]
interface =
{
	f0, n0
}
where x > 0

// ADD EDGE TO ARITY - Adds an edge to a target node until it has sufficient arity, reused in mutations
addEdgeToArity
(
	a, b : list;
	f, s : string;
	x, y, d : int
)
[1.0]
[
	(n0, a:f#red)
	(n1, b:y:s)
	(f0(R), "FunctionSet":f:x)
	(d0(R), "Depth":d)
	|
]
=>
[
	(n0, a:f#red)
	(n1, b:y:s)
	(f0(R), "FunctionSet":f:x)
	(d0(R), "Depth":d)
	|
	(e0, n0, n1, outdeg(n0))
]
interface =
{
	n0, n1, f0, d0
}
where s != "OUT" and outdeg(n0) < x and y < d

updateDepth
(
	a, b : list;
	f, s : string;
	x, y, z : int
)
[
	(n0, a:x:f#red)
	(n1, b:y:s)
	|
	(e0, n0, n1, z)
]
=>
[
	(n0, a:y+1:f#red)
	(n1, b:y:s)
	|
	(e0, n0, n1, z)
]
interface = {
	n0, n1
}
where x < y + 1

// DECOLOUR NODE - Removes red colour so node can be used as input to other nodes
decolourNode
(
	a : list
)
[
	(n0, a#red)
	|
]
=>
[
	(n0, a)
	|
]
interface =
{
	n0
}

// CONNECT OUTPUT - CONNECT OUTPUT
connectOutput
(
	a, b : list;
	s : string
)
[1.0]
[
	(n0, a:"OUT")
	(n1, b:s)
	|
]
=>
[
	(n0, a:"OUT")
	(n1, b:s)
	|
	(e0, n0, n1, 0)
]
interface =
{
	n0, n1
}
where s !="OUT" and outdeg(n0) < 1

// Delete NODE COUNTER - Deletes the counter for adding nodes
deleteNodeCounter
(
	x : int
)
[
	(n1(R), "NodeCounter":x)
	|
]
=>
[
	|
]
interface =
{
}

removeDepth
(
	a : list;
	x : int;
	s : string
)
[
	(n0, a:x:s)
	|
]
=>
[
	(n0, a:s#red)
	|
]
interface = {
	n0
}
where s != "OUT"
